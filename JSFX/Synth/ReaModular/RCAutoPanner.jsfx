/*
JSFX Name: ReaModular - RCAutoPanner
Author: RCJacH
Release Date: April 2018
Link: https://github.com/RCJacH/ReaScripts
Version: 1.0pre1
About:
  ## Description
  PRERELEASE, USE ONLY FOR TESTING PURPOSES. I might change the slider numbering later on.

  ReaModular - RCAutoPanner is an auto panning JSFX effect, supporting 6 types of sync method, also panning curves, cv input and other effects.

Changelog:
  * v1.0pre2 (2018-04-05)
    # Renamed **Delay %** to **Sync Offset %**
    # Changed Panlaw to dB for easier reference
    # CV/Audio Mode audio goes through curve setting, and thus spread and offset.
    + Smoother Automation for: Rate (Non-Sync), Curve, Rotate, Width, Spread, Offset
    + Ducking Mode
  * v1.0pre1 (2018-04-04)
    + Initial Algorithm
*/

// Licensed under the GNU GPL - http://www.gnu.org/licenses/gpl.html

desc: ReaModular - RCAutoPanner

 /* Rate */
slider1: 1<0,20,0.01>Rate (Hz)
slider2: 1<0.1,4,0.01>Rate (Ms)
slider3: 1<0.1,4,0.01>Rate (Beats)
slider4: 5<0,9,1{4,2,1,1/2,1/4,1/8,1/16,1/32,1/64,1/128}>Rate (Measure)
slider5: 0<0,2,1{NORMAL,TRIPLET,DOTTED}>Sync Type
slider6: 1<0,2,1{Hz,ms,Beats,Measure,CV,Audio}>Sync Method

slider8: 0<-100,100>Sync Offset %
slider9: 1<0,2,1{None,Reverse,Replicate}>Mirror

/* Shape */
slider11: 0<0,4,1{Linear,Exponential,Logarithmic,Sine,Cosine}>Curve Shape
slider12: 0<-100,100,1>Curve
slider13: 1<0,10,0.01>Curve Multiplier

/* Random */
// slider31: 0<0,100,1>Random Amount
// slider32: 0<0,10,1>Random Smoothing

/* Ducking */
slider35: -100<-100,0,0.1>Ducking Threshold
slider36: 0<0,10,1>Smooth Duck
slider37: 3<0,5,1{Left,Right,Forward,Backward,Random}>Ducking Direction
slider38: 0<0,1,1{Clip,Fold}>Ducking Border Behavior
slider39: 0<0,100,1>Ducking Amount %

/* Stage */
slider41: 0<-90,90,1>Rotate (Â°)
slider42: 100<0,200,1>Width (%)
slider43: 100<0,100,1>Spread
slider44: 0<-100,100,1>Offset

/* Settings */

slider60: 0<0,10,1>Smooth Pan
slider61: 3<0,3,1{None,Left,Right,Stereo}>Channel
slider62: 0<-12,12,1.5>Pan Law (dB)
// slider62: <0,1,1{Low,High}>Quality

slider64: 0.5<0,1> Pan CV


in_pin:left input
in_pin:right input
in_pin:Pan CV input
in_pin:Duck input
out_pin:left output
out_pin:right output
out_pin:pan output

@init
pi = $pi;
twoPi = pi * 2;
halfPi = pi * 0.5;

i_curPos = 0;
d_perSample = 1/srate;

inc = 0;
i_aveMem = inc; inc += 1;
i_aveMemG = inc; inc += 1;
i_rndMem = inc; inc += 1;
i_duckMem = inc; inc += 1;

function gain(db) ( db <= -100 ? 0 : 10^(0.05 * db) );

function lerp(src, tgt, pct) (
  !pct ? src : pct == 1 ? tgt : src * (1 - pct) + tgt * pct;
);

function getCurve(shape, pos, t, v0, v1, curve) local(value) (
  pos < 0 ? pos += t : pos > t ? pos -= t;
  !pos ? value = 0 : pos == t ? value = 1 : (
    shape == 0 ? ( // Linear
      value = pos / t;
    ) :
    shape == 1 ? ( // Exponential
      value = 2 ^ (pos / t) - 1;
    ) :
    shape == 2 ? ( // Logarithmic
      value = log(pos + 1) / log(t + 1);
    ) :
    shape == 3 ? ( // Sine
      value = 0.5 * (1 - cos($pi * (pos / t)));
    ) :
    shape == 4 ? ( // Cosine
      value = sin(halfPi * pos / t);
    );
  );
  v0 + value ^ curve * (v1 - v0);
);

function walkingAverage(inSample, len, mempos) local(ave) (
  ave=inSample*inSample;
  mempos[] = ave + len * (mempos[] - ave);
  mempos[] ^ 0.5 + 0.000000000001;
);

function fn_progress(b) (
  b ? this += 1 : this = 0;
  this > i_totalSamples ? this -= i_totalSamples;
);

function fn_updateTempo()(
  samples_per_beat = srate * 60 / tempo;
  beats_per_sample = (tempo / 60) * d_perSample;
);

function fn_updateRate(rate)(
  i_cycleSamples = !panSync? srate / rate : panSync== 1 ? floor(srate * rate) /* ms */ : floor(rate * samples_per_beat)/* Synced */;
  i_totalSamples = i_cycleSamples;
  slider9 ? i_cycleSamples = i_cycleSamples * 0.5;
  i_delaySample = i_totalSamples * slider8 * 0.01;
);

fn_updateTempo();
fn_updateRate(1);

@slider
!panSync? rateAppend = slider1 : panSync== 1 ? rateAppend = slider2 : (
  rateAppend = panSync== 2 ? slider3 : panSync== 3 ? 16/(2 ^ slider4);
  slider5 ? rateAppend *= slider5&1 ? 2/3 : slider5&2 ? 3/2;
);
panSync != slider6 ? (pan = d_drate = 0; rate = rateAppend; fn_updateRate(rate); panSync = slider6;);

panCurveAppend = 2 ^ (slider12 * 0.01 * slider13);

d_rotAppend=slider41*0.017453292;
d_widthAppend = slider42 * 0.005;
d_halfSpread = slider43 * 0.005;
d_offset = 0.5 + slider44 * 0.005;
d_leftAppend = d_offset - d_halfSpread;
d_rightAppend = d_offset + d_halfSpread;

rmstime = max(min(slider60/500,0.02),0.00004);
d_panRMS = exp(-1/(rmstime * srate));

d_rndPct = slider31 * 0.01;
rmstime = max(min(slider32/1000,0.02),0.00002);
d_rndRMS = exp(-1/(rmstime * srate));

d_duckThreshold = gain(slider35);
rmstime = max(min(slider36/1000,0.02),0.00002);
d_duckRMS = exp(-1/(rmstime * srate));
d_duckPct = slider39 * 0.01;

i_ch = slider61;
panlaw = 2 ^ (slider62 / 6);

@block
prevTempo != tempo ? (
  fn_updateTempo();
  fn_updateRate(rate);
  prevTempo = tempo;
);

per_samplesblock = 1 / samplesblock;

play_state&1 && (panSync== 2 || panSync== 3) ? (
  i_curPos = (play_position * srate) % i_totalSamples;
);
b_calcPan = (play_state&0 && b_calcSig) || play_state&1;

/* Smooth Faders */
d_drate = rate != rateAppend ? (rateAppend - rate) * per_samplesblock * 0.5;
d_dpanCurve = panCurve != panCurveAppend ? (panCurveAppend - panCurve) * per_samplesblock;

d_drot = d_rot != d_rotAppend ? (d_rotAppend - d_rot) * per_samplesblock;
d_dwidth = d_width != d_widthAppend ? (d_widthAppend - d_width) * per_samplesblock;
d_dleft = d_left != d_leftAppend ? (d_leftAppend - d_left) * per_samplesblock;
d_dright = d_right != d_rightAppend ? (d_rightAppend - d_right) * per_samplesblock;


@sample
b_calcSig = (i_ch&1 && (spl0 || s0)) || (i_ch&2 && (spl1 || s0));

/* Update Values */
d_drate ? (rate += d_drate; fn_updateRate(rate));
d_dpanCurve ? panCurve += d_dpanCurve;
d_drot ? d_rot += d_drot;
d_dwidth ? d_width += d_dwidth;
d_dleft ? d_left += d_dleft;
d_dright ? d_right += d_dright;

/* Setup Sound Stage */
b_calcSig ? (
  /* Input Setup */
  i_ch&1 ? s0 = spl0;
  i_ch&2 ? s1 = spl1;
  i_ch == 3 ? (
    // Rotation
    d_rot ? (
      s0 = sign(spl0);
      s1 = sign(spl1);
      angle = atan( spl0 / spl1 );
      (s0 == 1 && s1 == -1) || (s0 == -1 && s1 == -1) ? angle += 3.141592654;
      s0 == -1 && s1 == 1 ? angle += 6.283185307;
      spl1 == 0 ? spl0 > 0 ? angle = 1.570796327 : angle = 4.71238898;
      spl0 == 0 ? spl1 > 0 ? angle = 0 : angle = 3.141592654;
      angle -= d_rot;
      radius = sqrt( sqr(spl0)+sqr(spl1) ) ;
      s0 = sin(angle)*radius;
      s1 = cos(angle)*radius;
    );

    // Width
    mono = (s0 + s1) * 0.5;
    stereo = (s0 - s1) * d_width;
    s0 = mono + stereo;
    s1 = mono - stereo;
  );
):(
  s0 = s1 = 0;
);

b_calcPan ? (

  /* Pan Position */
  panSync< 4 ? ( // From Algorithm
    rate ? (
      i_cyclePos = i_curPos + i_delaySample;
      /* Change Rate */
      // To be implemented

      i_cyclePos < 0 ? i_cyclePos += i_totalSamples : i_cyclePos > i_totalSamples ? i_cyclePos -= i_totalSamples;
      i_cyclePos > i_cycleSamples ? (
        slider9 == 1 ? tgtPan = getCurve(slider11, i_cycleSamples - (i_cyclePos - i_cycleSamples), i_cycleSamples, d_left, d_right, panCurve) :
        slider9 == 2 ? tgtPan = 1 - getCurve(slider11, i_cyclePos, i_cycleSamples, d_left, d_right, panCurve);
      ): tgtPan = getCurve(slider11, i_cyclePos, i_cycleSamples, d_left, d_right, panCurve);

      // Progress
      i_curPos.fn_progress((play_state&0 && b_calcSig) || play_state&1);
    ):(
      tgtPan = d_offset;
    )
  ):( // From input
    tgtPan = panSync== 4 ? spl2 : panSync== 5 ? spl2 * 0.5 + 0.5;
    tgtPan = getCurve(slider11, max(0,min(1,tgtPan)), 1, d_left, d_right, panCurve);
  );

  /* Duck */
  slider39 ? (
    spl3 /* Duck in */ >= d_duckThreshold ? (
      d_duck = (abs(spl3) - d_duckThreshold) * d_duckPct;
      !slider37 || (slider37 == 4 && rand(1) < 0.5) ||
      (i_totalSamples > i_cycleSamples && 
        (slider37 == 2 && i_cyclePos > i_cycleSamples) || 
        (slider37 == 2 && i_cyclePos <= i_cycleSamples)) ? 
      d_duck = -d_duck;
    );
    slider36 ? d_duck = walkingAverage(d_duck, d_duckRMS, i_duckMem);
    tgtPan += d_duck;
    tgtPan = !slider38 ? max(0,min(1, tgtPan)) : (tgtPan > 1 ? 1 - (tgtPan - 1) : tgtPan < 0 ? -tgtPan : tgtPan);
  );

  pan = slider60 ? walkingAverage(tgtPan, d_panRMS, i_aveMem) : tgtPan;
  pan > 1 ? pan = 1 - (pan - 1); pan < 0 ? pan = -pan;
  slider64 = spl2 = pan;
  strpan = pan;
  invpan = 1 - pan;
);

/* Output */
b_calcSig ? (
  panlaw != 1 ? (
    strpan ? strpan *= lerp(panlaw, 1, abs(0.5 - strpan) * 2);
    invpan ? invpan *= lerp(panlaw, 1, abs(0.5 - invpan) * 2);
  );
  spl0 = (i_ch&1 ? s0 * invpan) + (i_ch&2 ? s1 * strpan);
  spl1 = (i_ch&1 ? s0 * strpan) + (i_ch&2 ? s1 * invpan);
);

@gfx 400 100

gfx_r = gfx_g = gfx_b = 0;
gfx_rect(0, 0, gfx_w, gfx_h);
gfx_r = gfx_g = gfx_b = 1;

gfx_x = 0;
halfH = gfx_h * 0.5;
gfx_y = halfH;
pos = 0;
while (
  prevX = pos;
  prevY = y;
  y = halfH - halfH * getCurve(slider11, gfx_w - pos, gfx_w, d_left, d_right, panCurve);
  gfx_line(prevX, prevY, pos, y, 1);
  pos += 1;
  pos <= gfx_w;
);
slider9 ?
while (
  prevX = pos;
  prevY = y;
  slider9 == 1 ? (
    y = getCurve(slider11, gfx_w - pos, gfx_w, d_left, d_right, panCurve);
    y = halfH + halfH * y;
  ):slider9 == 2 ?(
    y = getCurve(slider11, pos, gfx_w, d_left, d_right, panCurve);
    y = gfx_h - halfH * y;
  );
  gfx_line(prevX, prevY, pos, y, 1);
  pos -= 1;
  pos >= 0;
);
gfx_r = !gfx_g = gfx_b = 0;
y = panSync< 4 ? i_cyclePos/i_totalSamples * gfx_h : halfH;
gfx_circle(pan * gfx_w, y, 5, 1, 1);
