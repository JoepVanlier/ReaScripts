/*
JSFX Name: NoiseBuzz
Author: RCJacH
Release Date: Jan 2017
Link: https://github.com/RCJacH/ReaScripts
Version: 1.0
Reference:
  Wavesfactory SnareBuzz
  http://www.firstpr.com.au/dsp/pink-noise/
  ReaRack Filter
About:
  Audio triggered dynamic noise generator with ASR and filter.
  
  Instruction:
    1. Set **Mix** slider to taste, use **Noise Gain** for additional volume control.
    2. Select desired noise type.
    3. (Optional) Use **Threshold**, **Attack**, **Release** to shape the envelope of
      the noise, with AR triggered by input audio exceed or fall under the threshold.
    4. (Optional) Use **HPF**, **LPF**, and their **Resonance** controls to limit the
      frequency range of the generated noise.
    5. (Optional) Adjust the detector **RMS** of the input level to smooth out the level
      of the generated noise.
    6. You can also route the noise audio to channel 3-4 to further shape the noise,
      voiding the **Mix** control.
Changelog:
  * v1.0a (2017-01-31)
   + Renamed to NoiseBuzz
  * v1.0 (2017-01-22)
   + Initial Release
*/

// Licensed under the GNU GPL - http://www.gnu.org/licenses/gpl.html

desc: NoiseBuzz

slider1: 50<0, 100, 1> Mix (%)
slider2: -6<-24,0,0.1> Noise Gain (dB)
slider5: 0<0,1,1{White,Pink}> Noise Type
slider6: -60<-120,0,0.1> Threshold
slider7: 3<0,50,1>Attack (ms)
slider8: 50<0,500,1>Release (ms)
slider12: 20<0,22000,1> HPF
slider13: 0<0,1> HPF Resonance
slider14: 20000<0,22000,1> LPF
slider15: 0<0,1> LPF Resonance
slider20: 3<0,20,1>RMS (ms)
slider22: 0<0,1,1{Mix to 1+2, 3+4}> Output Channel

options: no_meter

@init
env = 0;

@slider
// Input Limiting
slider6 = min(0, slider6);
slider7 = max(0, slider7);
slider8 = max(0, slider8);
slider12 = max(0, min(22000, slider12));
slider13 = max(0, min(1, slider13));
slider14 = max(0, min(22000, slider14));
slider15 = max(0, min(1, slider15));
slider12 > slider14 ? slider12 = slider14;
slider14 < slider12 ? slider14 = slider12;

// Dynamic variables
threshold = 10^(slider6/20);
attack = slider7 ? 1/(srate * slider7 * 0.001) : 1;
release = slider8 ? 1/(srate * slider8 * 0.001) : 1;

// Filter variables
hpcut = min(((slider12 * 2) / srate), 0.99);
hpfb = slider13 + slider13 / (1 - hpcut);
lpcut = min(((slider14 * 2) / srate), 0.99);
lpfb = slider15 + slider15 / (1 - lpcut);

// Level variables
pink = slider5;
rms = exp(-1/(max(min(slider20 * 0.001, 0.02), 0.00004) * srate));
vn = 10^((pink ? slider2-9 : slider2) / 20);
org = 1 - (mix = (slider22 ? 1 : sqr(slider1) * 0.0001;));
mix *= vn;

@sample
in0 = spl0;
in1 = spl1;

// Generate random float level between -1 and 1.
noise=rand(2) - 1;
pink ? (
  b0 = 0.99886 * b0 + noise * 0.0555179;
  b1 = 0.99332 * b1 + noise * 0.0750759;
  b2 = 0.96900 * b2 + noise * 0.1538520;
  b3 = 0.86650 * b3 + noise * 0.3104856;
  b4 = 0.55000 * b4 + noise * 0.5329522;
  b5 = -0.7616 * b5 - noise * 0.0168980;
  tmp = b0 + b1 + b2 + b3 + b4 + b5 + b6 + noise * 0.5362;
  b6 = noise * 0.115926;
  noise = tmp;
);
vNoise = noise * mix;

// Get input peak/rms level.
slider1 ? (
  ave = in0 * in0 + in1 * in1;
  runave = ave + rms * (runave - ave);
  inV = sqrt(runave);
):(
  ave = 0;
  inV = max(abs(in0), abs(in1));
);

// Is it attack or release phase?
inV >= threshold ? (
  env < 1 ? env += attack;
) : (
  env > 0 ? env -= release;
);

// Calculate Filters.
hpn3 = hpn3 + hpcut * (vNoise - hpn3 + hpfb * (hpn3 - hpn4));
hpn4 = hpn4 + hpcut * (hpn3 - hpn4);
lpn3 = lpn3 + lpcut * (vNoise - lpn3 + lpfb * (lpn3 - lpn4));
lpn4 = lpn4 + lpcut * (lpn3 - lpn4);
vNoise = lpn4 - hpn4;

// Noise Volume.
outV = inV >= threshold ? env * (inV - threshold) : env * threshold;
vNoise = vNoise * outV;

// Output based on channel selection.
slider22 == 0 ? (
spl0 = in0 * org + vNoise;
spl1 = in1 * org + vNoise;
);
slider22 == 1 ? (
spl0 = in0;
spl1 = in1;
spl2 = spl3 = vNoise;
);
